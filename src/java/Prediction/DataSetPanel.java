package Prediction;

import javax.swing.JFileChooser;
import java.io.File;
import org.la4j.Vector;
import Prediction.TableDataSet;
import Prediction.CsvDataSetLoader;
import Prediction.Pair;
import Prediction.DataNormalization;
import Prediction.ZeroMeanOneVarianceNormalization;
import Prediction.ZeroToOneNormalization;
import Prediction.PCA;

/**
 *
 * @author Avi
 */
public class DataSetPanel extends javax.swing.JPanel {

    private static final int ClosedPriceIndex = 3;
    private final DataNormalization dataNormalization = new ZeroToOneNormalization();
    private PCA pca;
    private double[][] normalizedData;
    private double[][] dataSetInReducedPca;
    
    // return training data (normalization only) and without any division for trainig and testing
    public double[][] getTrainingDataNormalizationOnly() {
        double[][] trainingData = new double[normalizedData[0].length][normalizedData.length];
        
        for (int r = 0; r < normalizedData[0].length; ++r)
            for (int f = 0; f < normalizedData.length; ++f)
                trainingData[r][f] = normalizedData[f][r];
        
        return trainingData;
    }
    
    // return training data without any division for training and testing
    public double[][] getTrainingData() {
        double[][] trainingData = new double[dataSetInReducedPca[0].length][dataSetInReducedPca.length + 1];
        
        for (int r = 0; r < dataSetInReducedPca[0].length; ++r) {
            // get data set in reduced pca
            for (int f = 0; f < dataSetInReducedPca.length; ++f)
                trainingData[r][f] = dataSetInReducedPca[f][r];
            
            // Get closed price
            trainingData[r][dataSetInReducedPca.length] = normalizedData[ClosedPriceIndex][r];
        }
        
        return trainingData;
    }
    
    // return predicting data (normalization only) and without any division for trainig and testing
    public double[] preprocessDataNormalizationOnly(double[] data) {
        return dataNormalization.normalizeNewData(data);
    }
    
    // return data ready for predict in neural network
    // the format is
    // {PC1, PC2, ..., NormalizedClosedPrice}
    public double[] preprocessData(double[] data) {
        double[] normalizedData = dataNormalization.normalizeNewData(data);
        double[] pcaData = pca.calculateDataInPCA(normalizedData);
        
        double[] returnedData = new double[pcaData.length + 1];
        for (int f = 0; f < pcaData.length; ++f)
            returnedData[f] = pcaData[f];
        returnedData[pcaData.length] = normalizedData[ClosedPriceIndex];
        
        return returnedData;
    }
    
    // return the closed priced 
    public double toOriginalData(double closedPrice) {
        return dataNormalization.toOriginalData(ClosedPriceIndex, closedPrice);
    }
    
    
    /**
     * Creates new form DataSetPanel
     */
    public DataSetPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dataSetLocation = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        principalComponentsTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        dataInPCATable = new javax.swing.JTable();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Set"));

        jLabel1.setText("File :");

        dataSetLocation.setText("jTextField1");
        dataSetLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataSetLocationActionPerformed(evt);
            }
        });

        fileButton.setText("File");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Open", "High", "Low", "Close", "Volume", "Adj Close"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataTable.setEnabled(false);
        jScrollPane1.setViewportView(dataTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataSetLocation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileButton)))
                .addGap(6, 6, 6))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dataSetLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Principal Component Analysis"));

        principalComponentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Eige.", "Con.r", "C-con.r"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        principalComponentsTable.setEnabled(false);
        jScrollPane2.setViewportView(principalComponentsTable);

        dataInPCATable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        dataInPCATable.setEnabled(false);
        jScrollPane3.setViewportView(dataInPCATable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private TableDataSet dataSet;
    
    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser(".");
        int returnValue = fileChooser.showOpenDialog(null);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            dataSetLocation.setText(selectedFile.getAbsolutePath());
        
            loadAndDisplayDataSet(selectedFile);
        }
    }//GEN-LAST:event_fileButtonActionPerformed

    private void dataSetLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataSetLocationActionPerformed
        // /home/beekill/learning/university/data_mining/bai_tap_lon/data/table.csv
        File typedFile = new File(dataSetLocation.getText());
        
        if (!typedFile.exists()) {
            return;
        }
        
        loadAndDisplayDataSet(typedFile);
    }//GEN-LAST:event_dataSetLocationActionPerformed

    private void loadAndDisplayDataSet(File dataSetFile) {
        dataSet = loadDataSet(dataSetFile);
        displayDataSetInDataTable(dataSet);
        
        calculateAndDisplayPCAResult(dataSet);
    }
    
    private TableDataSet loadDataSet(File dataSetFile) {
        return CsvDataSetLoader.loadDataSet(dataSetFile, true);
    }
    
    private void displayDataSetInDataTable(TableDataSet dataSet) {
        normalizedData = dataNormalization.normalizeData(dataSet.to2dArrayFieldEach());
        Object[][] data = transpose(toObjectArray(normalizedData));
        String[] columnNames = null;
        
        if (dataSet.getColumnNames() == null) 
            columnNames = createColumnNames(dataSet);
        else
            columnNames = dataSet.getColumnNames();
        
        displayDataSetInTable(data, columnNames, dataTable);
    }
    
    private void displayDataSetInTable(Object[][] data, String[] columnNames, javax.swing.JTable table) {
        table.setModel(new javax.swing.table.DefaultTableModel(
                data, columnNames
        ));
    }
    
    private String[] createColumnNames(TableDataSet dataSet) {
        String[] columnNames = new String[dataSet.getNumOfColumns()];
        for (int i = 0; i < dataSet.getNumOfColumns(); ++i)
            columnNames[i] = "Column #" + String.valueOf(i);
        return columnNames;
    }
    
    private Object[][] convertDataSetToObjectArray(TableDataSet dataSet) {
        Object[][] data = new Object[dataSet.getNumOfRows()][dataSet.getNumOfColumns()];
        
        for (int row = 0; row < dataSet.getNumOfRows(); ++row) {
            for (int col = 0; col < dataSet.getNumOfColumns(); ++col) {
                if (col == 0) {
                    // first column
                    data[row][0] = dataSet.getRow(row).first;
                } else
                    data[row][col] = dataSet.getRow(row).second[col - 1];
            }
        }
        
        return data;
    }
    
    private static double[][] removeClosePrice(double[][] data) {
        double[][] dataWithoutClosePrice = new double[data.length - 2][data[0].length];
        
        for (int i = 0; i < data.length - 1; ++i) {
            if (i == ClosedPriceIndex)
                continue;
            
            int iIdx = (i < ClosedPriceIndex) ? i : i - 1;
            for (int j = 0; j < data[0].length; ++j)
                dataWithoutClosePrice[iIdx][j] = data[i][j];
        }
        
        return dataWithoutClosePrice;
    }
    
    private void calculateAndDisplayPCAResult(TableDataSet dataSet) {
        double[][] dataWithoutClosePrice = removeClosePrice(normalizedData);
        pca = new PCA(dataWithoutClosePrice, 0.99);
        dataSetInReducedPca = pca.getDataInReducedPrincipalComponents();
        
        displayEigenValuesAndItsContribution(pca.getEigenVectorsValues());
        displayDataSetInReducedPca();
    }
    
    private void displayDataSetInReducedPca() {
        Object[][] objectses = toObjectArray(dataSetInReducedPca);
        objectses = transpose(objectses);
        
        String[] tableHeaders = new String[dataSetInReducedPca.length];
        for (int i = 0; i < tableHeaders.length; ++i)
            tableHeaders[i] = "PCA #" + String.valueOf(i);
        
        displayDataSetInTable(objectses, tableHeaders, dataInPCATable);
    }
    
    private void displayEigenValuesAndItsContribution(Pair<Vector, Double>[] eigenVectorValuePairs) {
        double[] eigenValues = getEigenValues(eigenVectorValuePairs);
        
        double[][] table = calculateEigenVectorContributionAndCummulativeContribution(eigenValues);
        displayDataSetInTable(toObjectArray(table), new String[] {"Eige.", "Con.r", "C-con.r"}, principalComponentsTable);
    }
    
    private Object[][] toObjectArray(double[][] data) {
        Object[][] objectses = new Object[data.length][data[0].length];
        
        for (int i = 0; i < objectses.length; ++i)
            for (int j = 0; j < objectses[i].length; ++j)
                objectses[i][j] = data[i][j];
        
        return objectses;
    }
    
    private double[] getEigenValues(Pair<Vector, Double>[] pairs) {
        double[] eigenValues = new double[pairs.length];
        
        for (int i = 0; i < pairs.length; ++i)
            eigenValues[i] = pairs[i].second;
        
        return eigenValues;
    }
    
    private double[][] calculateEigenVectorContributionAndCummulativeContribution(double[] eigenValues) {
        double[][] table = new double[eigenValues.length][3];
        
        double sumResult = sum(eigenValues);
        
        for (int i = 0; i < eigenValues.length; ++i) {
            table[i][0] = eigenValues[i];
            table[i][1] = eigenValues[i] / sumResult * 100;
            table[i][2] = (i == 0) ? table[0][1] : table[i - 1][2] + table[i][1];
        }
        
        return table;
    }
    
    private static double sum(double[] values) {
        double result = 0.0;
        for (int i = 0; i < values.length; ++i)
            result += values[i];
        return result;
    }
    
    private static Object [][] transpose(Object [][] values) {
        int rows = values.length;
        int cols = values[0].length;
        Object[][] transposed = new Object[cols][rows];
        
        for (int r = 0; r < cols; ++r)
            for (int c = 0; c < rows; ++c)
                transposed[r][c] = values[c][r];
        
        return transposed;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable dataInPCATable;
    private javax.swing.JTextField dataSetLocation;
    private javax.swing.JTable dataTable;
    private javax.swing.JButton fileButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable principalComponentsTable;
    // End of variables declaration//GEN-END:variables
}
